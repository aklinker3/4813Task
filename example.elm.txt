module Main exposing (..)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (on)
import Json.Decode as Decode
import Mouse exposing (Position)
import Time exposing (Time, millisecond)


main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }



-- MODEL


type alias Model =
    { paddlePosition : Position
    , ballPosition : Position
    , drag : Maybe Drag
    }


type alias Drag =
    { start : Position
    , current : Position
    }


init : ( Model, Cmd Msg )
init =
    ( Model (Position 0 200) (Position 200 200) Nothing, Cmd.none )



-- UPDATE


type Msg
    = DragStart Position
    | DragAt Position
    | DragEnd Position
    | Tick Time


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    ( updateModel msg model, Cmd.none )


updateModel : Msg -> Model -> Model
updateModel msg model =
    case msg of
        DragStart xy ->
            { model | drag = (Just (Drag xy xy)) }

        DragAt xy ->
            { model | drag = (Maybe.map (\{ start, current } -> Drag start (Position start.x xy.y)) model.drag) }

        DragEnd _ ->
            { model | paddlePosition = (getPaddlePosition model), drag = Nothing }

        Tick _ ->
            model



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        ((Time.every (1000 * millisecond) Tick)
            :: case model.drag of
                Nothing ->
                    []

                Just _ ->
                    [ Mouse.moves DragAt, Mouse.ups DragEnd ]
        )



-- VIEW


(=>) =
    (,)


viewPaddle : Model -> Html Msg
viewPaddle model =
    let
        realPosition =
            getPaddlePosition model
    in
        div
            [ onMouseDown
            , style
                [ "background-color" => "#3C2D8F"
                , "cursor" => "move"
                , "width" => "10px"
                , "height" => "100px"
                , "border-radius" => "4px"
                , "position" => "absolute"
                , "left" => px realPosition.x
                , "top" => px realPosition.y
                , "display" => "flex"
                ]
            ]
            []


viewBall : Model -> Html Msg
viewBall model =
    div
        [ onMouseDown
        , style
            [ "background-color" => "#3C8D2F"
            , "width" => "100px"
            , "height" => "100px"
            , "border-radius" => "400px"
            , "position" => "absolute"
            , "left" => px model.ballPosition.x
            , "top" => px model.ballPosition.y
            , "color" => "white"
            , "display" => "flex"
            , "align-items" => "center"
            , "justify-content" => "center"
            ]
        ]
        [ text "Hit Me!"
        ]


view : Model -> Html Msg
view model =
    div [] [ viewBall model, viewPaddle model ]


px : Int -> String
px number =
    toString number ++ "px"


getPaddlePosition : Model -> Position
getPaddlePosition { paddlePosition, ballPosition, drag } =
    case drag of
        Nothing ->
            paddlePosition

        Just { start, current } ->
            Position
                (paddlePosition.x + current.x - start.x)
                (paddlePosition.y + current.y - start.y)


onMouseDown : Attribute Msg
onMouseDown =
    on "mousedown" (Decode.map DragStart Mouse.position)
